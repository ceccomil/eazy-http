namespace EazyHttp.Generator;

internal static class CodeGenerator
{
    private const string INDENT = "    ";

    public static void Execute(
        SourceProductionContext context,
        Config config)
    {
        GenerateHttpClients(
            context,
            config);

        GenerateEazyClients(
            context,
            config);

        GenerateClientsRegistration(
            context,
            config);
    }

    private static string Indentation(
        int level)
    {
        var result = "";
        for (var i = 0; i < level; i++)
        {
            result += INDENT;
        }

        return result;
    }

    private static void GenerateHttpClients(
        SourceProductionContext context,
        Config config)
    {
        foreach (var client in config.Clients)
        {
            var baseAddr = $"\"{client.BaseAddress}\"";

            if (baseAddr.Contains(VarQualifier))
            {
                baseAddr = $"{client.BaseAddress}"
                    .BackToVariable();
            }

            var code = @$"// <auto-generated last-generation=""{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}"" />
using EazyHttp.Contracts;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;

namespace {config.NameSpacePrefix}EazyHttp.HttpClients;

public interface I{client.Name} : IEazyHttpClient {{ }}


public class {client.Name} : EazyHttpClientBase, I{client.Name}
{{
    public {client.Name}(
        HttpClient httpClient,
        IOptions<EazyClientOptions> options)
        : base(httpClient, options)
        {{
            if (!string.IsNullOrWhiteSpace({baseAddr}))
            {{
                httpClient.BaseAddress = new Uri({baseAddr});
            }}
        }}
}}";

            context
                .AddSource(
                    $"EazyHttp.Generated.{client.Name}",
                    SourceText.From(code, Encoding.UTF8));
        }
    }

    private static void GenerateEazyClients(
        SourceProductionContext context,
        Config config)
    {
        var code = @$"// <auto-generated last-generation=""{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}"" />
using {config.NameSpacePrefix}EazyHttp.HttpClients;

namespace {config.NameSpacePrefix}EazyHttp;

{GetIEazyClients(config)}

public class EazyClients : IEazyClients
{{{GetEazyClientsProperties(config)}   
{GetEazyClientsCtor(config)}";

        code += @"
}";

        context
            .AddSource(
                $"EazyHttp.Generated.EazyClients",
                SourceText.From(code, Encoding.UTF8));
    }

    private static string GetIEazyClients(
        Config config)
    {
        var code = @"
public interface IEazyClients
{";

        foreach (var client in config.Clients)
        {
            code += @$"
    I{client.Name} {client.Name} {{ get; }}
";
        }

        code += @"
}";
        return code;
    }

    private static string GetEazyClientsProperties(
        Config config)
    {
        var code = "";

        foreach (var client in config.Clients)
        {
            code += @$"
    public I{client.Name} {client.Name} {{ get; }}
";
        }

        return code;
    }

    private static string GetEazyClientsCtor(
        Config config)
    {
        var code = @"
    public EazyClients(";

        foreach (var client in config.Clients)
        {
            code += @$"
        I{client.Name} {client.Name.ToLower()},";
        }

        if (code.EndsWith(","))
        {
            code = code
                .Remove(
                    code.Length - 1);
        }

        code +=
            @")
    {";

        foreach (var client in config.Clients)
        {
            code += @$"
        {client.Name} = {client.Name.ToLower()};";
        }

        code += @"
    }";

        return code;
    }

    private static void GenerateClientsRegistration(
        SourceProductionContext context,
        Config config)
    {
        var prefix = "";
        if (config.NameSpacePrefix.EndsWith("."))
        {
            prefix = config
                 .NameSpacePrefix
                 .Remove(
                     config.NameSpacePrefix.Length - 1,
                     1);
        }

        var code = @$"// <auto-generated last-generation=""{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}"" />
using {config.NameSpacePrefix}EazyHttp.HttpClients;
using Microsoft.Extensions.DependencyInjection;

namespace {config.NameSpacePrefix}EazyHttp;

public static class RegisterHttpClients
{{
    public static IServiceCollection {prefix}AddEazyHttpClients(
        this IServiceCollection services)
    {{";

        foreach (var client in config.Clients)
        {
            code += @$"

        services
            .AddHttpClient<I{client.Name}, {client.Name}>()";

            if (config.Handlers.ContainsKey(client.Name))
            {
                var handler = config
                    .Handlers[client.Name];

                code += @$"
            .ConfigurePrimaryHttpMessageHandler<{handler}>();

        services
            .AddTransient<{handler}>()";
            }

            code += @";
";
        }

        code += @"
        services
            .AddTransient<IEazyClients, EazyClients>();

        return services;
    }
}";

        context
            .AddSource(
                $"EazyHttp.Generated.EazyClientsRegistration",
                SourceText.From(code, Encoding.UTF8));

    }
}
