namespace EazyHttp.Generator;

[Generator]
public class CodeGenerator : ISourceGenerator
{
    internal const string INDENT = "    ";

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not SyntaxReceiver sr ||
            !sr.ConfigFound)
        {
            return;
        }

        try
        {
            GenerateHttpClients(
                context,
                sr);

            GenerateEazyClients(
                context,
                sr);

            GenerateClientsRegistration(
                context,
                sr);
        }
        catch (Exception ex)
        {
            sr.GeneratorLogger.Add($"Error!!!\r\n{ex}");
        }

#if DEBUG
        GenerateLogs(
            context,
            sr);
#endif
    }

    private static void GenerateLogs(
        GeneratorExecutionContext context,
        SyntaxReceiver sr) => context
            .AddSource("Logs", SourceText.From($@"// <auto-generated last-generation=""{DateTime.Now}"" />
/*
{string.Join(Environment.NewLine, sr.GeneratorLogger)}
*/
namespace {sr.NameSpacePrefix}EazyHttp;

public static class Logs
{{
    public static string[] Collection {{ get; }} = new[]
    {{{GetLogs(sr.GeneratorLogger)}
    }};
}}", Encoding.UTF8));

    public void Initialize(GeneratorInitializationContext context) => context
            .RegisterForSyntaxNotifications(() => new SyntaxReceiver());

    private static string GetLogs(
        List<string> collection)
    {
        var logs = $"{Environment.NewLine}";
        var end = $",{Environment.NewLine}";

        foreach (var log in collection)
        {
            logs += $"{Indentation(2)}@\"" +
                $"{log.Replace("\"", "\"\"")}\"{end}";
        }

        if (logs.EndsWith(end))
        {
            logs = logs.Remove(
                logs.Length - end.Length);
        }

        return logs;
    }

    private static string Indentation(
        int level)
    {
        var result = "";
        for (var i = 0; i < level; i++)
        {
            result += INDENT;
        }

        return result;
    }

    private static void GenerateHttpClients(
        GeneratorExecutionContext context,
        SyntaxReceiver sr)
    {
        sr
            .GeneratorLogger
            .Add($"Http clients to be created: {sr.Clients.Count}");

        foreach (var client in sr.Clients)
        {
            var code = @$"// <auto-generated last-generation=""{DateTime.Now}"" />
using EazyHttp.Contracts;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;

namespace {sr.NameSpacePrefix}EazyHttp.HttpClients;

public interface I{client.Name} : IEazyHttpClient {{ }}


public class {client.Name} : EazyHttpClientBase, I{client.Name}
{{
    public {client.Name}(
        HttpClient httpClient,
        IOptions<EazyClientOptions> options)
        : base(httpClient, options)
        {{
            if (!string.IsNullOrWhiteSpace(""{client.BaseAddress}""))
            {{
                httpClient.BaseAddress = new Uri(""{client.BaseAddress}"");
            }}
        }}
}}";

            context
                .AddSource(
                    $"EazyHttp.Generated.{client.Name}",
                    SourceText.From(code, Encoding.UTF8));
        }
    }

    private static void GenerateEazyClients(
        GeneratorExecutionContext context,
        SyntaxReceiver sr)
    {
        var code = @$"// <auto-generated last-generation=""{DateTime.Now}"" />
using {sr.NameSpacePrefix}EazyHttp.HttpClients;

namespace {sr.NameSpacePrefix}EazyHttp;

{GetIEazyClients(sr)}

public class EazyClients : IEazyClients
{{{GetEazyClientsProperties(sr)}   
{GetEazyClientsCtor(sr)}";

        code += @"
}";

        context
            .AddSource(
                $"EazyHttp.Generated.EazyClients",
                SourceText.From(code, Encoding.UTF8));
    }

    private static string GetIEazyClients(
        SyntaxReceiver sr)
    {
        var code = @"
public interface IEazyClients
{";

        foreach (var client in sr.Clients)
        {
            code += @$"
    I{client.Name} {client.Name} {{ get; }}
";
        }

        code += @"
}";
        return code;
    }

    private static string GetEazyClientsProperties(
        SyntaxReceiver sr)
    {
        var code = "";

        foreach (var client in sr.Clients)
        {
            code += @$"
    public I{client.Name} {client.Name} {{ get; }}
";
        }

        return code;
    }

    private static string GetEazyClientsCtor(
        SyntaxReceiver sr)
    {
        var code = @"
    public EazyClients(";

        foreach (var client in sr.Clients)
        {
            code += @$"
        I{client.Name} {client.Name.ToLower()},";
        }

        code = code
            .Remove(code.Length - 1) +
            @")
    {";

        foreach (var client in sr.Clients)
        {
            code += @$"
        {client.Name} = {client.Name.ToLower()};";
        }

        code += @"
    }";

        return code;
    }

    private static void GenerateClientsRegistration(
        GeneratorExecutionContext context,
        SyntaxReceiver sr)
    {
        var prefix = "";
        if (sr.NameSpacePrefix.EndsWith("."))
        {
           prefix = sr
                .NameSpacePrefix
                .Remove(
                    sr.NameSpacePrefix.Length - 1,
                    1);
        }

        var code = @$"// <auto-generated last-generation=""{DateTime.Now}"" />
using {sr.NameSpacePrefix}EazyHttp.HttpClients;
using Microsoft.Extensions.DependencyInjection;

namespace {sr.NameSpacePrefix}EazyHttp;

public static class RegisterHttpClients
{{
    public static IServiceCollection {prefix}AddEazyHttpClients(
        this IServiceCollection services)
    {{";

        foreach (var client in sr.Clients)
        {
            code += @$"

        services
            .AddHttpClient<I{client.Name}, {client.Name}>();
";
        }

        code += @"
        services
            .AddTransient<IEazyClients, EazyClients>();

        return services;
    }
}";

        context
            .AddSource(
                $"EazyHttp.Generated.EazyClientsRegistration",
                SourceText.From(code, Encoding.UTF8));

    }
}
